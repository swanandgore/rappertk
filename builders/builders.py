# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_builders', [dirname(__file__)])
        except ImportError:
            import _builders
            return _builders
        if fp is not None:
            try:
                _mod = imp.load_module('_builders', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _builders = swig_import_helper()
    del swig_import_helper
else:
    import _builders
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _builders.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _builders.SwigPyIterator_value(self)
    def incr(self, n = 1): return _builders.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _builders.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _builders.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _builders.SwigPyIterator_equal(self, *args)
    def copy(self): return _builders.SwigPyIterator_copy(self)
    def next(self): return _builders.SwigPyIterator_next(self)
    def __next__(self): return _builders.SwigPyIterator___next__(self)
    def previous(self): return _builders.SwigPyIterator_previous(self)
    def advance(self, *args): return _builders.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _builders.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _builders.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _builders.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _builders.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _builders.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _builders.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _builders.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VecInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _builders.VecInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _builders.VecInt___nonzero__(self)
    def __bool__(self): return _builders.VecInt___bool__(self)
    def __len__(self): return _builders.VecInt___len__(self)
    def pop(self): return _builders.VecInt_pop(self)
    def __getslice__(self, *args): return _builders.VecInt___getslice__(self, *args)
    def __setslice__(self, *args): return _builders.VecInt___setslice__(self, *args)
    def __delslice__(self, *args): return _builders.VecInt___delslice__(self, *args)
    def __delitem__(self, *args): return _builders.VecInt___delitem__(self, *args)
    def __getitem__(self, *args): return _builders.VecInt___getitem__(self, *args)
    def __setitem__(self, *args): return _builders.VecInt___setitem__(self, *args)
    def append(self, *args): return _builders.VecInt_append(self, *args)
    def empty(self): return _builders.VecInt_empty(self)
    def size(self): return _builders.VecInt_size(self)
    def clear(self): return _builders.VecInt_clear(self)
    def swap(self, *args): return _builders.VecInt_swap(self, *args)
    def get_allocator(self): return _builders.VecInt_get_allocator(self)
    def begin(self): return _builders.VecInt_begin(self)
    def end(self): return _builders.VecInt_end(self)
    def rbegin(self): return _builders.VecInt_rbegin(self)
    def rend(self): return _builders.VecInt_rend(self)
    def pop_back(self): return _builders.VecInt_pop_back(self)
    def erase(self, *args): return _builders.VecInt_erase(self, *args)
    def __init__(self, *args): 
        this = _builders.new_VecInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _builders.VecInt_push_back(self, *args)
    def front(self): return _builders.VecInt_front(self)
    def back(self): return _builders.VecInt_back(self)
    def assign(self, *args): return _builders.VecInt_assign(self, *args)
    def resize(self, *args): return _builders.VecInt_resize(self, *args)
    def insert(self, *args): return _builders.VecInt_insert(self, *args)
    def reserve(self, *args): return _builders.VecInt_reserve(self, *args)
    def capacity(self): return _builders.VecInt_capacity(self)
    __swig_destroy__ = _builders.delete_VecInt
    __del__ = lambda self : None;
VecInt_swigregister = _builders.VecInt_swigregister
VecInt_swigregister(VecInt)

class VecVecInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecVecInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVecInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _builders.VecVecInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _builders.VecVecInt___nonzero__(self)
    def __bool__(self): return _builders.VecVecInt___bool__(self)
    def __len__(self): return _builders.VecVecInt___len__(self)
    def pop(self): return _builders.VecVecInt_pop(self)
    def __getslice__(self, *args): return _builders.VecVecInt___getslice__(self, *args)
    def __setslice__(self, *args): return _builders.VecVecInt___setslice__(self, *args)
    def __delslice__(self, *args): return _builders.VecVecInt___delslice__(self, *args)
    def __delitem__(self, *args): return _builders.VecVecInt___delitem__(self, *args)
    def __getitem__(self, *args): return _builders.VecVecInt___getitem__(self, *args)
    def __setitem__(self, *args): return _builders.VecVecInt___setitem__(self, *args)
    def append(self, *args): return _builders.VecVecInt_append(self, *args)
    def empty(self): return _builders.VecVecInt_empty(self)
    def size(self): return _builders.VecVecInt_size(self)
    def clear(self): return _builders.VecVecInt_clear(self)
    def swap(self, *args): return _builders.VecVecInt_swap(self, *args)
    def get_allocator(self): return _builders.VecVecInt_get_allocator(self)
    def begin(self): return _builders.VecVecInt_begin(self)
    def end(self): return _builders.VecVecInt_end(self)
    def rbegin(self): return _builders.VecVecInt_rbegin(self)
    def rend(self): return _builders.VecVecInt_rend(self)
    def pop_back(self): return _builders.VecVecInt_pop_back(self)
    def erase(self, *args): return _builders.VecVecInt_erase(self, *args)
    def __init__(self, *args): 
        this = _builders.new_VecVecInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _builders.VecVecInt_push_back(self, *args)
    def front(self): return _builders.VecVecInt_front(self)
    def back(self): return _builders.VecVecInt_back(self)
    def assign(self, *args): return _builders.VecVecInt_assign(self, *args)
    def resize(self, *args): return _builders.VecVecInt_resize(self, *args)
    def insert(self, *args): return _builders.VecVecInt_insert(self, *args)
    def reserve(self, *args): return _builders.VecVecInt_reserve(self, *args)
    def capacity(self): return _builders.VecVecInt_capacity(self)
    __swig_destroy__ = _builders.delete_VecVecInt
    __del__ = lambda self : None;
VecVecInt_swigregister = _builders.VecVecInt_swigregister
VecVecInt_swigregister(VecVecInt)

class VecFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecFloat, name)
    __repr__ = _swig_repr
    def iterator(self): return _builders.VecFloat_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _builders.VecFloat___nonzero__(self)
    def __bool__(self): return _builders.VecFloat___bool__(self)
    def __len__(self): return _builders.VecFloat___len__(self)
    def pop(self): return _builders.VecFloat_pop(self)
    def __getslice__(self, *args): return _builders.VecFloat___getslice__(self, *args)
    def __setslice__(self, *args): return _builders.VecFloat___setslice__(self, *args)
    def __delslice__(self, *args): return _builders.VecFloat___delslice__(self, *args)
    def __delitem__(self, *args): return _builders.VecFloat___delitem__(self, *args)
    def __getitem__(self, *args): return _builders.VecFloat___getitem__(self, *args)
    def __setitem__(self, *args): return _builders.VecFloat___setitem__(self, *args)
    def append(self, *args): return _builders.VecFloat_append(self, *args)
    def empty(self): return _builders.VecFloat_empty(self)
    def size(self): return _builders.VecFloat_size(self)
    def clear(self): return _builders.VecFloat_clear(self)
    def swap(self, *args): return _builders.VecFloat_swap(self, *args)
    def get_allocator(self): return _builders.VecFloat_get_allocator(self)
    def begin(self): return _builders.VecFloat_begin(self)
    def end(self): return _builders.VecFloat_end(self)
    def rbegin(self): return _builders.VecFloat_rbegin(self)
    def rend(self): return _builders.VecFloat_rend(self)
    def pop_back(self): return _builders.VecFloat_pop_back(self)
    def erase(self, *args): return _builders.VecFloat_erase(self, *args)
    def __init__(self, *args): 
        this = _builders.new_VecFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _builders.VecFloat_push_back(self, *args)
    def front(self): return _builders.VecFloat_front(self)
    def back(self): return _builders.VecFloat_back(self)
    def assign(self, *args): return _builders.VecFloat_assign(self, *args)
    def resize(self, *args): return _builders.VecFloat_resize(self, *args)
    def insert(self, *args): return _builders.VecFloat_insert(self, *args)
    def reserve(self, *args): return _builders.VecFloat_reserve(self, *args)
    def capacity(self): return _builders.VecFloat_capacity(self)
    __swig_destroy__ = _builders.delete_VecFloat
    __del__ = lambda self : None;
VecFloat_swigregister = _builders.VecFloat_swigregister
VecFloat_swigregister(VecFloat)

class VecVecFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecVecFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVecFloat, name)
    __repr__ = _swig_repr
    def iterator(self): return _builders.VecVecFloat_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _builders.VecVecFloat___nonzero__(self)
    def __bool__(self): return _builders.VecVecFloat___bool__(self)
    def __len__(self): return _builders.VecVecFloat___len__(self)
    def pop(self): return _builders.VecVecFloat_pop(self)
    def __getslice__(self, *args): return _builders.VecVecFloat___getslice__(self, *args)
    def __setslice__(self, *args): return _builders.VecVecFloat___setslice__(self, *args)
    def __delslice__(self, *args): return _builders.VecVecFloat___delslice__(self, *args)
    def __delitem__(self, *args): return _builders.VecVecFloat___delitem__(self, *args)
    def __getitem__(self, *args): return _builders.VecVecFloat___getitem__(self, *args)
    def __setitem__(self, *args): return _builders.VecVecFloat___setitem__(self, *args)
    def append(self, *args): return _builders.VecVecFloat_append(self, *args)
    def empty(self): return _builders.VecVecFloat_empty(self)
    def size(self): return _builders.VecVecFloat_size(self)
    def clear(self): return _builders.VecVecFloat_clear(self)
    def swap(self, *args): return _builders.VecVecFloat_swap(self, *args)
    def get_allocator(self): return _builders.VecVecFloat_get_allocator(self)
    def begin(self): return _builders.VecVecFloat_begin(self)
    def end(self): return _builders.VecVecFloat_end(self)
    def rbegin(self): return _builders.VecVecFloat_rbegin(self)
    def rend(self): return _builders.VecVecFloat_rend(self)
    def pop_back(self): return _builders.VecVecFloat_pop_back(self)
    def erase(self, *args): return _builders.VecVecFloat_erase(self, *args)
    def __init__(self, *args): 
        this = _builders.new_VecVecFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _builders.VecVecFloat_push_back(self, *args)
    def front(self): return _builders.VecVecFloat_front(self)
    def back(self): return _builders.VecVecFloat_back(self)
    def assign(self, *args): return _builders.VecVecFloat_assign(self, *args)
    def resize(self, *args): return _builders.VecVecFloat_resize(self, *args)
    def insert(self, *args): return _builders.VecVecFloat_insert(self, *args)
    def reserve(self, *args): return _builders.VecVecFloat_reserve(self, *args)
    def capacity(self): return _builders.VecVecFloat_capacity(self)
    __swig_destroy__ = _builders.delete_VecVecFloat
    __del__ = lambda self : None;
VecVecFloat_swigregister = _builders.VecVecFloat_swigregister
VecVecFloat_swigregister(VecVecFloat)

class VecBuilder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecBuilder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecBuilder, name)
    __repr__ = _swig_repr
    def iterator(self): return _builders.VecBuilder_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _builders.VecBuilder___nonzero__(self)
    def __bool__(self): return _builders.VecBuilder___bool__(self)
    def __len__(self): return _builders.VecBuilder___len__(self)
    def pop(self): return _builders.VecBuilder_pop(self)
    def __getslice__(self, *args): return _builders.VecBuilder___getslice__(self, *args)
    def __setslice__(self, *args): return _builders.VecBuilder___setslice__(self, *args)
    def __delslice__(self, *args): return _builders.VecBuilder___delslice__(self, *args)
    def __delitem__(self, *args): return _builders.VecBuilder___delitem__(self, *args)
    def __getitem__(self, *args): return _builders.VecBuilder___getitem__(self, *args)
    def __setitem__(self, *args): return _builders.VecBuilder___setitem__(self, *args)
    def append(self, *args): return _builders.VecBuilder_append(self, *args)
    def empty(self): return _builders.VecBuilder_empty(self)
    def size(self): return _builders.VecBuilder_size(self)
    def clear(self): return _builders.VecBuilder_clear(self)
    def swap(self, *args): return _builders.VecBuilder_swap(self, *args)
    def get_allocator(self): return _builders.VecBuilder_get_allocator(self)
    def begin(self): return _builders.VecBuilder_begin(self)
    def end(self): return _builders.VecBuilder_end(self)
    def rbegin(self): return _builders.VecBuilder_rbegin(self)
    def rend(self): return _builders.VecBuilder_rend(self)
    def pop_back(self): return _builders.VecBuilder_pop_back(self)
    def erase(self, *args): return _builders.VecBuilder_erase(self, *args)
    def __init__(self, *args): 
        this = _builders.new_VecBuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _builders.VecBuilder_push_back(self, *args)
    def front(self): return _builders.VecBuilder_front(self)
    def back(self): return _builders.VecBuilder_back(self)
    def assign(self, *args): return _builders.VecBuilder_assign(self, *args)
    def resize(self, *args): return _builders.VecBuilder_resize(self, *args)
    def insert(self, *args): return _builders.VecBuilder_insert(self, *args)
    def reserve(self, *args): return _builders.VecBuilder_reserve(self, *args)
    def capacity(self): return _builders.VecBuilder_capacity(self)
    __swig_destroy__ = _builders.delete_VecBuilder
    __del__ = lambda self : None;
VecBuilder_swigregister = _builders.VecBuilder_swigregister
VecBuilder_swigregister(VecBuilder)

class Builder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Builder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Builder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _builders.new_Builder(*args)
        try: self.this.append(this)
        except: self.this = this
    def describe(self): return _builders.Builder_describe(self)
    __swig_destroy__ = _builders.delete_Builder
    __del__ = lambda self : None;
    def build(self, *args): return _builders.Builder_build(self, *args)
    def buildSample(self, *args): return _builders.Builder_buildSample(self, *args)
    def getIP(self): return _builders.Builder_getIP(self)
    def getOP(self): return _builders.Builder_getOP(self)
    def name(self): return _builders.Builder_name(self)
    def startSession(self, *args): return _builders.Builder_startSession(self, *args)
    def endSession(self): return _builders.Builder_endSession(self)
Builder_swigregister = _builders.Builder_swigregister
Builder_swigregister(Builder)

class DihedBuilder(Builder):
    __swig_setmethods__ = {}
    for _s in [Builder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DihedBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [Builder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DihedBuilder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _builders.new_DihedBuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    def build(self, *args): return _builders.DihedBuilder_build(self, *args)
    def makeCopy(self): return _builders.DihedBuilder_makeCopy(self)
    __swig_destroy__ = _builders.delete_DihedBuilder
    __del__ = lambda self : None;
DihedBuilder_swigregister = _builders.DihedBuilder_swigregister
DihedBuilder_swigregister(DihedBuilder)

class BasicPepBuilder(Builder):
    __swig_setmethods__ = {}
    for _s in [Builder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicPepBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [Builder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BasicPepBuilder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _builders.new_BasicPepBuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    def build(self, *args): return _builders.BasicPepBuilder_build(self, *args)
    def sample(self, *args): return _builders.BasicPepBuilder_sample(self, *args)
    def build1(self, *args): return _builders.BasicPepBuilder_build1(self, *args)
    __swig_destroy__ = _builders.delete_BasicPepBuilder
    __del__ = lambda self : None;
BasicPepBuilder_swigregister = _builders.BasicPepBuilder_swigregister
BasicPepBuilder_swigregister(BasicPepBuilder)

class PeptideBuilder(BasicPepBuilder):
    __swig_setmethods__ = {}
    for _s in [BasicPepBuilder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeptideBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [BasicPepBuilder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PeptideBuilder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _builders.new_PeptideBuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    def sample(self, *args): return _builders.PeptideBuilder_sample(self, *args)
    def makeCopy(self): return _builders.PeptideBuilder_makeCopy(self)
    __swig_destroy__ = _builders.delete_PeptideBuilder
    __del__ = lambda self : None;
PeptideBuilder_swigregister = _builders.PeptideBuilder_swigregister
PeptideBuilder_swigregister(PeptideBuilder)

class PeptideBridgeBuilder(Builder):
    __swig_setmethods__ = {}
    for _s in [Builder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeptideBridgeBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [Builder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PeptideBridgeBuilder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _builders.new_PeptideBridgeBuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    def build(self, *args): return _builders.PeptideBridgeBuilder_build(self, *args)
    def makeCopy(self): return _builders.PeptideBridgeBuilder_makeCopy(self)
    __swig_getmethods__["setCTtrials"] = lambda x: _builders.PeptideBridgeBuilder_setCTtrials
    if _newclass:setCTtrials = staticmethod(_builders.PeptideBridgeBuilder_setCTtrials)
    __swig_getmethods__["setThetastep"] = lambda x: _builders.PeptideBridgeBuilder_setThetastep
    if _newclass:setThetastep = staticmethod(_builders.PeptideBridgeBuilder_setThetastep)
    __swig_setmethods__["cttrials"] = _builders.PeptideBridgeBuilder_cttrials_set
    __swig_getmethods__["cttrials"] = _builders.PeptideBridgeBuilder_cttrials_get
    if _newclass:cttrials = _swig_property(_builders.PeptideBridgeBuilder_cttrials_get, _builders.PeptideBridgeBuilder_cttrials_set)
    __swig_setmethods__["thetastep"] = _builders.PeptideBridgeBuilder_thetastep_set
    __swig_getmethods__["thetastep"] = _builders.PeptideBridgeBuilder_thetastep_get
    if _newclass:thetastep = _swig_property(_builders.PeptideBridgeBuilder_thetastep_get, _builders.PeptideBridgeBuilder_thetastep_set)
    __swig_setmethods__["transProp0"] = _builders.PeptideBridgeBuilder_transProp0_set
    __swig_getmethods__["transProp0"] = _builders.PeptideBridgeBuilder_transProp0_get
    if _newclass:transProp0 = _swig_property(_builders.PeptideBridgeBuilder_transProp0_get, _builders.PeptideBridgeBuilder_transProp0_set)
    __swig_setmethods__["transProp1"] = _builders.PeptideBridgeBuilder_transProp1_set
    __swig_getmethods__["transProp1"] = _builders.PeptideBridgeBuilder_transProp1_get
    if _newclass:transProp1 = _swig_property(_builders.PeptideBridgeBuilder_transProp1_get, _builders.PeptideBridgeBuilder_transProp1_set)
    __swig_destroy__ = _builders.delete_PeptideBridgeBuilder
    __del__ = lambda self : None;
PeptideBridgeBuilder_swigregister = _builders.PeptideBridgeBuilder_swigregister
PeptideBridgeBuilder_swigregister(PeptideBridgeBuilder)

def PeptideBridgeBuilder_setCTtrials(*args):
  return _builders.PeptideBridgeBuilder_setCTtrials(*args)
PeptideBridgeBuilder_setCTtrials = _builders.PeptideBridgeBuilder_setCTtrials

def PeptideBridgeBuilder_setThetastep(*args):
  return _builders.PeptideBridgeBuilder_setThetastep(*args)
PeptideBridgeBuilder_setThetastep = _builders.PeptideBridgeBuilder_setThetastep
cvar = _builders.cvar

class CBbuilder(Builder):
    __swig_setmethods__ = {}
    for _s in [Builder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBbuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [Builder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBbuilder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _builders.new_CBbuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    def build(self, *args): return _builders.CBbuilder_build(self, *args)
    def buildSample(self, *args): return _builders.CBbuilder_buildSample(self, *args)
    def makeCopy(self): return _builders.CBbuilder_makeCopy(self)
    __swig_destroy__ = _builders.delete_CBbuilder
    __del__ = lambda self : None;
CBbuilder_swigregister = _builders.CBbuilder_swigregister
CBbuilder_swigregister(CBbuilder)

class ChiBuilder(Builder):
    __swig_setmethods__ = {}
    for _s in [Builder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChiBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [Builder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChiBuilder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _builders.new_ChiBuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    def buildSample(self, *args): return _builders.ChiBuilder_buildSample(self, *args)
    def build(self, *args): return _builders.ChiBuilder_build(self, *args)
    def makeCopy(self): return _builders.ChiBuilder_makeCopy(self)
    __swig_destroy__ = _builders.delete_ChiBuilder
    __del__ = lambda self : None;
ChiBuilder_swigregister = _builders.ChiBuilder_swigregister
ChiBuilder_swigregister(ChiBuilder)

class Constants(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constants, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Constants, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _builders.new_Constants()
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args): return _builders.Constants_set(self, *args)
    def get(self, *args): return _builders.Constants_get(self, *args)
    __swig_destroy__ = _builders.delete_Constants
    __del__ = lambda self : None;
Constants_swigregister = _builders.Constants_swigregister
Constants_swigregister(Constants)

class NAbuilder(Builder):
    __swig_setmethods__ = {}
    for _s in [Builder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NAbuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [Builder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NAbuilder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _builders.new_NAbuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    def build(self, *args): return _builders.NAbuilder_build(self, *args)
    __swig_getmethods__["buildPhosphate"] = lambda x: _builders.NAbuilder_buildPhosphate
    if _newclass:buildPhosphate = staticmethod(_builders.NAbuilder_buildPhosphate)
    __swig_getmethods__["buildBackbone"] = lambda x: _builders.NAbuilder_buildBackbone
    if _newclass:buildBackbone = staticmethod(_builders.NAbuilder_buildBackbone)
    __swig_getmethods__["buildSugar"] = lambda x: _builders.NAbuilder_buildSugar
    if _newclass:buildSugar = staticmethod(_builders.NAbuilder_buildSugar)
    __swig_getmethods__["build_AG_scaffold"] = lambda x: _builders.NAbuilder_build_AG_scaffold
    if _newclass:build_AG_scaffold = staticmethod(_builders.NAbuilder_build_AG_scaffold)
    __swig_getmethods__["build_A"] = lambda x: _builders.NAbuilder_build_A
    if _newclass:build_A = staticmethod(_builders.NAbuilder_build_A)
    __swig_getmethods__["build_G"] = lambda x: _builders.NAbuilder_build_G
    if _newclass:build_G = staticmethod(_builders.NAbuilder_build_G)
    __swig_getmethods__["build_TCU_scaffold"] = lambda x: _builders.NAbuilder_build_TCU_scaffold
    if _newclass:build_TCU_scaffold = staticmethod(_builders.NAbuilder_build_TCU_scaffold)
    __swig_getmethods__["build_T"] = lambda x: _builders.NAbuilder_build_T
    if _newclass:build_T = staticmethod(_builders.NAbuilder_build_T)
    __swig_getmethods__["build_C"] = lambda x: _builders.NAbuilder_build_C
    if _newclass:build_C = staticmethod(_builders.NAbuilder_build_C)
    __swig_getmethods__["build_U"] = lambda x: _builders.NAbuilder_build_U
    if _newclass:build_U = staticmethod(_builders.NAbuilder_build_U)
    __swig_destroy__ = _builders.delete_NAbuilder
    __del__ = lambda self : None;
NAbuilder_swigregister = _builders.NAbuilder_swigregister
NAbuilder_swigregister(NAbuilder)

def NAbuilder_buildPhosphate(*args):
  return _builders.NAbuilder_buildPhosphate(*args)
NAbuilder_buildPhosphate = _builders.NAbuilder_buildPhosphate

def NAbuilder_buildBackbone(*args):
  return _builders.NAbuilder_buildBackbone(*args)
NAbuilder_buildBackbone = _builders.NAbuilder_buildBackbone

def NAbuilder_buildSugar(*args):
  return _builders.NAbuilder_buildSugar(*args)
NAbuilder_buildSugar = _builders.NAbuilder_buildSugar

def NAbuilder_build_AG_scaffold(*args):
  return _builders.NAbuilder_build_AG_scaffold(*args)
NAbuilder_build_AG_scaffold = _builders.NAbuilder_build_AG_scaffold

def NAbuilder_build_A(*args):
  return _builders.NAbuilder_build_A(*args)
NAbuilder_build_A = _builders.NAbuilder_build_A

def NAbuilder_build_G(*args):
  return _builders.NAbuilder_build_G(*args)
NAbuilder_build_G = _builders.NAbuilder_build_G

def NAbuilder_build_TCU_scaffold(*args):
  return _builders.NAbuilder_build_TCU_scaffold(*args)
NAbuilder_build_TCU_scaffold = _builders.NAbuilder_build_TCU_scaffold

def NAbuilder_build_T(*args):
  return _builders.NAbuilder_build_T(*args)
NAbuilder_build_T = _builders.NAbuilder_build_T

def NAbuilder_build_C(*args):
  return _builders.NAbuilder_build_C(*args)
NAbuilder_build_C = _builders.NAbuilder_build_C

def NAbuilder_build_U(*args):
  return _builders.NAbuilder_build_U(*args)
NAbuilder_build_U = _builders.NAbuilder_build_U

class NAsuiteBuilder(Builder):
    __swig_setmethods__ = {}
    for _s in [Builder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NAsuiteBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [Builder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NAsuiteBuilder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _builders.new_NAsuiteBuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    def build(self, *args): return _builders.NAsuiteBuilder_build(self, *args)
    def makeCopy(self): return _builders.NAsuiteBuilder_makeCopy(self)
    __swig_destroy__ = _builders.delete_NAsuiteBuilder
    __del__ = lambda self : None;
NAsuiteBuilder_swigregister = _builders.NAsuiteBuilder_swigregister
NAsuiteBuilder_swigregister(NAsuiteBuilder)

class CNCaBuilder(Builder):
    __swig_setmethods__ = {}
    for _s in [Builder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNCaBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [Builder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CNCaBuilder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _builders.new_CNCaBuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    def build(self, *args): return _builders.CNCaBuilder_build(self, *args)
    __swig_destroy__ = _builders.delete_CNCaBuilder
    __del__ = lambda self : None;
CNCaBuilder_swigregister = _builders.CNCaBuilder_swigregister
CNCaBuilder_swigregister(CNCaBuilder)

class InformedPeptideBuilder(BasicPepBuilder):
    __swig_setmethods__ = {}
    for _s in [BasicPepBuilder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InformedPeptideBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [BasicPepBuilder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InformedPeptideBuilder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _builders.new_InformedPeptideBuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    def sample(self, *args): return _builders.InformedPeptideBuilder_sample(self, *args)
    def makeCopy(self): return _builders.InformedPeptideBuilder_makeCopy(self)
    def build(self, *args): return _builders.InformedPeptideBuilder_build(self, *args)
    __swig_destroy__ = _builders.delete_InformedPeptideBuilder
    __del__ = lambda self : None;
InformedPeptideBuilder_swigregister = _builders.InformedPeptideBuilder_swigregister
InformedPeptideBuilder_swigregister(InformedPeptideBuilder)

class NanchorBuilder(Builder):
    __swig_setmethods__ = {}
    for _s in [Builder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NanchorBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [Builder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NanchorBuilder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _builders.new_NanchorBuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    def build(self, *args): return _builders.NanchorBuilder_build(self, *args)
    def makeCopy(self): return _builders.NanchorBuilder_makeCopy(self)
    __swig_destroy__ = _builders.delete_NanchorBuilder
    __del__ = lambda self : None;
NanchorBuilder_swigregister = _builders.NanchorBuilder_swigregister
NanchorBuilder_swigregister(NanchorBuilder)

class BuilderGroup(Builder):
    __swig_setmethods__ = {}
    for _s in [Builder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BuilderGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [Builder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BuilderGroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _builders.new_BuilderGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    def build(self, *args): return _builders.BuilderGroup_build(self, *args)
    def makeCopy(self): return _builders.BuilderGroup_makeCopy(self)
    __swig_destroy__ = _builders.delete_BuilderGroup
    __del__ = lambda self : None;
BuilderGroup_swigregister = _builders.BuilderGroup_swigregister
BuilderGroup_swigregister(BuilderGroup)

class RapPepBuilder(BasicPepBuilder):
    __swig_setmethods__ = {}
    for _s in [BasicPepBuilder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RapPepBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [BasicPepBuilder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RapPepBuilder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _builders.new_RapPepBuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    def sample(self, *args): return _builders.RapPepBuilder_sample(self, *args)
    __swig_destroy__ = _builders.delete_RapPepBuilder
    __del__ = lambda self : None;
RapPepBuilder_swigregister = _builders.RapPepBuilder_swigregister
RapPepBuilder_swigregister(RapPepBuilder)

class PsoChis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PsoChis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PsoChis, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _builders.new_PsoChis(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _builders.PsoChis___call__(self, *args)
    __swig_setmethods__["phi"] = _builders.PsoChis_phi_set
    __swig_getmethods__["phi"] = _builders.PsoChis_phi_get
    if _newclass:phi = _swig_property(_builders.PsoChis_phi_get, _builders.PsoChis_phi_set)
    __swig_setmethods__["psi"] = _builders.PsoChis_psi_set
    __swig_getmethods__["psi"] = _builders.PsoChis_psi_get
    if _newclass:psi = _swig_property(_builders.PsoChis_psi_get, _builders.PsoChis_psi_set)
    __swig_setmethods__["omega"] = _builders.PsoChis_omega_set
    __swig_getmethods__["omega"] = _builders.PsoChis_omega_get
    if _newclass:omega = _swig_property(_builders.PsoChis_omega_get, _builders.PsoChis_omega_set)
    __swig_setmethods__["chi1"] = _builders.PsoChis_chi1_set
    __swig_getmethods__["chi1"] = _builders.PsoChis_chi1_get
    if _newclass:chi1 = _swig_property(_builders.PsoChis_chi1_get, _builders.PsoChis_chi1_set)
    __swig_setmethods__["chi2"] = _builders.PsoChis_chi2_set
    __swig_getmethods__["chi2"] = _builders.PsoChis_chi2_get
    if _newclass:chi2 = _swig_property(_builders.PsoChis_chi2_get, _builders.PsoChis_chi2_set)
    __swig_setmethods__["chi3"] = _builders.PsoChis_chi3_set
    __swig_getmethods__["chi3"] = _builders.PsoChis_chi3_get
    if _newclass:chi3 = _swig_property(_builders.PsoChis_chi3_get, _builders.PsoChis_chi3_set)
    __swig_setmethods__["chi4"] = _builders.PsoChis_chi4_set
    __swig_getmethods__["chi4"] = _builders.PsoChis_chi4_get
    if _newclass:chi4 = _swig_property(_builders.PsoChis_chi4_get, _builders.PsoChis_chi4_set)
    __swig_destroy__ = _builders.delete_PsoChis
    __del__ = lambda self : None;
PsoChis_swigregister = _builders.PsoChis_swigregister
PsoChis_swigregister(PsoChis)

class ProtResBuilder(Builder):
    __swig_setmethods__ = {}
    for _s in [Builder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProtResBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [Builder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProtResBuilder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _builders.new_ProtResBuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _builders.delete_ProtResBuilder
    __del__ = lambda self : None;
    def build(self, *args): return _builders.ProtResBuilder_build(self, *args)
    def checkAndAddIfNew(self, *args): return _builders.ProtResBuilder_checkAndAddIfNew(self, *args)
    def makeCopy(self): return _builders.ProtResBuilder_makeCopy(self)
ProtResBuilder_swigregister = _builders.ProtResBuilder_swigregister
ProtResBuilder_swigregister(ProtResBuilder)

class TransRotator(Builder):
    __swig_setmethods__ = {}
    for _s in [Builder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransRotator, name, value)
    __swig_getmethods__ = {}
    for _s in [Builder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransRotator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _builders.new_TransRotator(*args)
        try: self.this.append(this)
        except: self.this = this
    def build(self, *args): return _builders.TransRotator_build(self, *args)
    __swig_destroy__ = _builders.delete_TransRotator
    __del__ = lambda self : None;
TransRotator_swigregister = _builders.TransRotator_swigregister
TransRotator_swigregister(TransRotator)

class Rotator(Builder):
    __swig_setmethods__ = {}
    for _s in [Builder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rotator, name, value)
    __swig_getmethods__ = {}
    for _s in [Builder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rotator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _builders.new_Rotator(*args)
        try: self.this.append(this)
        except: self.this = this
    def build(self, *args): return _builders.Rotator_build(self, *args)
    __swig_destroy__ = _builders.delete_Rotator
    __del__ = lambda self : None;
Rotator_swigregister = _builders.Rotator_swigregister
Rotator_swigregister(Rotator)

class OptFragPlacer(Builder):
    __swig_setmethods__ = {}
    for _s in [Builder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptFragPlacer, name, value)
    __swig_getmethods__ = {}
    for _s in [Builder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptFragPlacer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _builders.new_OptFragPlacer(*args)
        try: self.this.append(this)
        except: self.this = this
    def build(self, *args): return _builders.OptFragPlacer_build(self, *args)
    def makeCopy(self): return _builders.OptFragPlacer_makeCopy(self)
    __swig_destroy__ = _builders.delete_OptFragPlacer
    __del__ = lambda self : None;
OptFragPlacer_swigregister = _builders.OptFragPlacer_swigregister
OptFragPlacer_swigregister(OptFragPlacer)

class SCLbuilder(Builder):
    __swig_setmethods__ = {}
    for _s in [Builder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCLbuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [Builder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SCLbuilder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _builders.new_SCLbuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    def build(self, *args): return _builders.SCLbuilder_build(self, *args)
    def buildSample(self, *args): return _builders.SCLbuilder_buildSample(self, *args)
    def makeCopy(self): return _builders.SCLbuilder_makeCopy(self)
    __swig_destroy__ = _builders.delete_SCLbuilder
    __del__ = lambda self : None;
SCLbuilder_swigregister = _builders.SCLbuilder_swigregister
SCLbuilder_swigregister(SCLbuilder)



