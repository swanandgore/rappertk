# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_samplers', [dirname(__file__)])
        except ImportError:
            import _samplers
            return _samplers
        if fp is not None:
            try:
                _mod = imp.load_module('_samplers', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _samplers = swig_import_helper()
    del swig_import_helper
else:
    import _samplers
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _samplers.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _samplers.SwigPyIterator_value(self)
    def incr(self, n = 1): return _samplers.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _samplers.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _samplers.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _samplers.SwigPyIterator_equal(self, *args)
    def copy(self): return _samplers.SwigPyIterator_copy(self)
    def next(self): return _samplers.SwigPyIterator_next(self)
    def __next__(self): return _samplers.SwigPyIterator___next__(self)
    def previous(self): return _samplers.SwigPyIterator_previous(self)
    def advance(self, *args): return _samplers.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _samplers.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _samplers.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _samplers.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _samplers.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _samplers.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _samplers.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _samplers.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class PhipsiSampler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhipsiSampler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PhipsiSampler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _samplers.new_PhipsiSampler(*args)
        try: self.this.append(this)
        except: self.this = this
    def readPhipsiMap(self, *args): return _samplers.PhipsiSampler_readPhipsiMap(self, *args)
    def findProb(self, *args): return _samplers.PhipsiSampler_findProb(self, *args)
    def sample(self, *args): return _samplers.PhipsiSampler_sample(self, *args)
    def printSample(self): return _samplers.PhipsiSampler_printSample(self)
    def maxUniqueSamples(self): return _samplers.PhipsiSampler_maxUniqueSamples(self)
    __swig_destroy__ = _samplers.delete_PhipsiSampler
    __del__ = lambda self : None;
PhipsiSampler_swigregister = _samplers.PhipsiSampler_swigregister
PhipsiSampler_swigregister(PhipsiSampler)

class InformedPhipsiSampler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InformedPhipsiSampler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InformedPhipsiSampler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _samplers.new_InformedPhipsiSampler(*args)
        try: self.this.append(this)
        except: self.this = this
    def sample(self, *args): return _samplers.InformedPhipsiSampler_sample(self, *args)
    __swig_destroy__ = _samplers.delete_InformedPhipsiSampler
    __del__ = lambda self : None;
InformedPhipsiSampler_swigregister = _samplers.InformedPhipsiSampler_swigregister
InformedPhipsiSampler_swigregister(InformedPhipsiSampler)

class OmegaSampler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OmegaSampler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OmegaSampler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _samplers.new_OmegaSampler(*args)
        try: self.this.append(this)
        except: self.this = this
    def sample(self, *args): return _samplers.OmegaSampler_sample(self, *args)
    def maxUniqueSamples(self): return _samplers.OmegaSampler_maxUniqueSamples(self)
    __swig_destroy__ = _samplers.delete_OmegaSampler
    __del__ = lambda self : None;
OmegaSampler_swigregister = _samplers.OmegaSampler_swigregister
OmegaSampler_swigregister(OmegaSampler)

class CHI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHI, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chi1"] = _samplers.CHI_chi1_set
    __swig_getmethods__["chi1"] = _samplers.CHI_chi1_get
    if _newclass:chi1 = _swig_property(_samplers.CHI_chi1_get, _samplers.CHI_chi1_set)
    __swig_setmethods__["chi2"] = _samplers.CHI_chi2_set
    __swig_getmethods__["chi2"] = _samplers.CHI_chi2_get
    if _newclass:chi2 = _swig_property(_samplers.CHI_chi2_get, _samplers.CHI_chi2_set)
    __swig_setmethods__["chi3"] = _samplers.CHI_chi3_set
    __swig_getmethods__["chi3"] = _samplers.CHI_chi3_get
    if _newclass:chi3 = _swig_property(_samplers.CHI_chi3_get, _samplers.CHI_chi3_set)
    __swig_setmethods__["chi4"] = _samplers.CHI_chi4_set
    __swig_getmethods__["chi4"] = _samplers.CHI_chi4_get
    if _newclass:chi4 = _swig_property(_samplers.CHI_chi4_get, _samplers.CHI_chi4_set)
    def __init__(self): 
        this = _samplers.new_CHI()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _samplers.delete_CHI
    __del__ = lambda self : None;
CHI_swigregister = _samplers.CHI_swigregister
CHI_swigregister(CHI)

class BBdepChiSampler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BBdepChiSampler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BBdepChiSampler, name)
    __repr__ = _swig_repr
    def sample(self, *args): return _samplers.BBdepChiSampler_sample(self, *args)
    def __init__(self, *args): 
        this = _samplers.new_BBdepChiSampler(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _samplers.delete_BBdepChiSampler
    __del__ = lambda self : None;
BBdepChiSampler_swigregister = _samplers.BBdepChiSampler_swigregister
BBdepChiSampler_swigregister(BBdepChiSampler)

class PRLsampler(BBdepChiSampler):
    __swig_setmethods__ = {}
    for _s in [BBdepChiSampler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PRLsampler, name, value)
    __swig_getmethods__ = {}
    for _s in [BBdepChiSampler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PRLsampler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _samplers.new_PRLsampler(*args)
        try: self.this.append(this)
        except: self.this = this
    def sample(self, *args): return _samplers.PRLsampler_sample(self, *args)
    def addSample(self, *args): return _samplers.PRLsampler_addSample(self, *args)
    def makeCopy(self): return _samplers.PRLsampler_makeCopy(self)
    def describe(self): return _samplers.PRLsampler_describe(self)
    __swig_setmethods__["chis"] = _samplers.PRLsampler_chis_set
    __swig_getmethods__["chis"] = _samplers.PRLsampler_chis_get
    if _newclass:chis = _swig_property(_samplers.PRLsampler_chis_get, _samplers.PRLsampler_chis_set)
    __swig_setmethods__["r2ind"] = _samplers.PRLsampler_r2ind_set
    __swig_getmethods__["r2ind"] = _samplers.PRLsampler_r2ind_get
    if _newclass:r2ind = _swig_property(_samplers.PRLsampler_r2ind_get, _samplers.PRLsampler_r2ind_set)
    __swig_destroy__ = _samplers.delete_PRLsampler
    __del__ = lambda self : None;
PRLsampler_swigregister = _samplers.PRLsampler_swigregister
PRLsampler_swigregister(PRLsampler)

class NAsampler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NAsampler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NAsampler, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _samplers.new_NAsampler()
        try: self.this.append(this)
        except: self.this = this
    def sample(self, *args): return _samplers.NAsampler_sample(self, *args)
    __swig_destroy__ = _samplers.delete_NAsampler
    __del__ = lambda self : None;
NAsampler_swigregister = _samplers.NAsampler_swigregister
NAsampler_swigregister(NAsampler)

class SuiteVal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SuiteVal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SuiteVal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _samplers.new_SuiteVal(*args)
        try: self.this.append(this)
        except: self.this = this
    def diff(self, *args): return _samplers.SuiteVal_diff(self, *args)
    def describe(self, *args): return _samplers.SuiteVal_describe(self, *args)
    __swig_setmethods__["d0"] = _samplers.SuiteVal_d0_set
    __swig_getmethods__["d0"] = _samplers.SuiteVal_d0_get
    if _newclass:d0 = _swig_property(_samplers.SuiteVal_d0_get, _samplers.SuiteVal_d0_set)
    __swig_setmethods__["e"] = _samplers.SuiteVal_e_set
    __swig_getmethods__["e"] = _samplers.SuiteVal_e_get
    if _newclass:e = _swig_property(_samplers.SuiteVal_e_get, _samplers.SuiteVal_e_set)
    __swig_setmethods__["z"] = _samplers.SuiteVal_z_set
    __swig_getmethods__["z"] = _samplers.SuiteVal_z_get
    if _newclass:z = _swig_property(_samplers.SuiteVal_z_get, _samplers.SuiteVal_z_set)
    __swig_setmethods__["a"] = _samplers.SuiteVal_a_set
    __swig_getmethods__["a"] = _samplers.SuiteVal_a_get
    if _newclass:a = _swig_property(_samplers.SuiteVal_a_get, _samplers.SuiteVal_a_set)
    __swig_setmethods__["b"] = _samplers.SuiteVal_b_set
    __swig_getmethods__["b"] = _samplers.SuiteVal_b_get
    if _newclass:b = _swig_property(_samplers.SuiteVal_b_get, _samplers.SuiteVal_b_set)
    __swig_setmethods__["g"] = _samplers.SuiteVal_g_set
    __swig_getmethods__["g"] = _samplers.SuiteVal_g_get
    if _newclass:g = _swig_property(_samplers.SuiteVal_g_get, _samplers.SuiteVal_g_set)
    __swig_setmethods__["d1"] = _samplers.SuiteVal_d1_set
    __swig_getmethods__["d1"] = _samplers.SuiteVal_d1_get
    if _newclass:d1 = _swig_property(_samplers.SuiteVal_d1_get, _samplers.SuiteVal_d1_set)
    __swig_destroy__ = _samplers.delete_SuiteVal
    __del__ = lambda self : None;
SuiteVal_swigregister = _samplers.SuiteVal_swigregister
SuiteVal_swigregister(SuiteVal)

class NAsuiteSampler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NAsuiteSampler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NAsuiteSampler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _samplers.new_NAsuiteSampler(*args)
        try: self.this.append(this)
        except: self.this = this
    def readRNAsuite(self, *args): return _samplers.NAsuiteSampler_readRNAsuite(self, *args)
    def sample(self, *args): return _samplers.NAsuiteSampler_sample(self, *args)
    def closestSuiteVal(self, *args): return _samplers.NAsuiteSampler_closestSuiteVal(self, *args)
    def closestSuiteKey(self, *args): return _samplers.NAsuiteSampler_closestSuiteKey(self, *args)
    __swig_destroy__ = _samplers.delete_NAsuiteSampler
    __del__ = lambda self : None;
NAsuiteSampler_swigregister = _samplers.NAsuiteSampler_swigregister
NAsuiteSampler_swigregister(NAsuiteSampler)

class RapSampler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RapSampler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RapSampler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _samplers.new_RapSampler(*args)
        try: self.this.append(this)
        except: self.this = this
    def sample(self, *args): return _samplers.RapSampler_sample(self, *args)
    __swig_destroy__ = _samplers.delete_RapSampler
    __del__ = lambda self : None;
RapSampler_swigregister = _samplers.RapSampler_swigregister
RapSampler_swigregister(RapSampler)

class RAT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RAT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RAT, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _samplers.new_RAT(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["r"] = _samplers.RAT_r_set
    __swig_getmethods__["r"] = _samplers.RAT_r_get
    if _newclass:r = _swig_property(_samplers.RAT_r_get, _samplers.RAT_r_set)
    __swig_setmethods__["a"] = _samplers.RAT_a_set
    __swig_getmethods__["a"] = _samplers.RAT_a_get
    if _newclass:a = _swig_property(_samplers.RAT_a_get, _samplers.RAT_a_set)
    __swig_setmethods__["t"] = _samplers.RAT_t_set
    __swig_getmethods__["t"] = _samplers.RAT_t_get
    if _newclass:t = _swig_property(_samplers.RAT_t_get, _samplers.RAT_t_set)
    __swig_destroy__ = _samplers.delete_RAT
    __del__ = lambda self : None;
RAT_swigregister = _samplers.RAT_swigregister
RAT_swigregister(RAT)

class compareRATs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, compareRATs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, compareRATs, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _samplers.compareRATs___call__(self, *args)
    def __init__(self): 
        this = _samplers.new_compareRATs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _samplers.delete_compareRATs
    __del__ = lambda self : None;
compareRATs_swigregister = _samplers.compareRATs_swigregister
compareRATs_swigregister(compareRATs)

class RATdata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RATdata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RATdata, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["bwdinstance"] = lambda x: _samplers.RATdata_bwdinstance
    if _newclass:bwdinstance = staticmethod(_samplers.RATdata_bwdinstance)
    __swig_getmethods__["fwdinstance"] = lambda x: _samplers.RATdata_fwdinstance
    if _newclass:fwdinstance = staticmethod(_samplers.RATdata_fwdinstance)
    def contents(self): return _samplers.RATdata_contents(self)
    def range(self, *args): return _samplers.RATdata_range(self, *args)
    __swig_destroy__ = _samplers.delete_RATdata
    __del__ = lambda self : None;
RATdata_swigregister = _samplers.RATdata_swigregister
RATdata_swigregister(RATdata)

def RATdata_bwdinstance(*args):
  return _samplers.RATdata_bwdinstance(*args)
RATdata_bwdinstance = _samplers.RATdata_bwdinstance

def RATdata_fwdinstance(*args):
  return _samplers.RATdata_fwdinstance(*args)
RATdata_fwdinstance = _samplers.RATdata_fwdinstance

class FragSampler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FragSampler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FragSampler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _samplers.new_FragSampler(*args)
        try: self.this.append(this)
        except: self.this = this
    def sample(self, *args): return _samplers.FragSampler_sample(self, *args)
    def maxUniqueSamples(self): return _samplers.FragSampler_maxUniqueSamples(self)
    __swig_destroy__ = _samplers.delete_FragSampler
    __del__ = lambda self : None;
FragSampler_swigregister = _samplers.FragSampler_swigregister
FragSampler_swigregister(FragSampler)

class SCLsampler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCLsampler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCLsampler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _samplers.new_SCLsampler(*args)
        try: self.this.append(this)
        except: self.this = this
    def sample(self, *args): return _samplers.SCLsampler_sample(self, *args)
    def makeCopy(self): return _samplers.SCLsampler_makeCopy(self)
    def addSample(self, *args): return _samplers.SCLsampler_addSample(self, *args)
    __swig_destroy__ = _samplers.delete_SCLsampler
    __del__ = lambda self : None;
SCLsampler_swigregister = _samplers.SCLsampler_swigregister
SCLsampler_swigregister(SCLsampler)



