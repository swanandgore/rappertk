# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_misc', [dirname(__file__)])
        except ImportError:
            import _misc
            return _misc
        if fp is not None:
            try:
                _mod = imp.load_module('_misc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _misc = swig_import_helper()
    del swig_import_helper
else:
    import _misc
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Verbosity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Verbosity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Verbosity, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _misc.Verbosity_instance
    if _newclass:instance = staticmethod(_misc.Verbosity_instance)
    def isLevelLEq(self, *args): return _misc.Verbosity_isLevelLEq(self, *args)
    def setVerbo(self, *args): return _misc.Verbosity_setVerbo(self, *args)
    __swig_destroy__ = _misc.delete_Verbosity
    __del__ = lambda self : None;
Verbosity_swigregister = _misc.Verbosity_swigregister
Verbosity_swigregister(Verbosity)

def Verbosity_instance():
  return _misc.Verbosity_instance()
Verbosity_instance = _misc.Verbosity_instance


def setVerbosity(*args):
  return _misc.setVerbosity(*args)
setVerbosity = _misc.setVerbosity

def verbose(*args):
  return _misc.verbose(*args)
verbose = _misc.verbose
class RanGen(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RanGen, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RanGen, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _misc.RanGen_instance
    if _newclass:instance = staticmethod(_misc.RanGen_instance)
    def ran_uni_0_1(self): return _misc.RanGen_ran_uni_0_1(self)
    def seedme(self, *args): return _misc.RanGen_seedme(self, *args)
    __swig_destroy__ = _misc.delete_RanGen
    __del__ = lambda self : None;
RanGen_swigregister = _misc.RanGen_swigregister
RanGen_swigregister(RanGen)

def RanGen_instance():
  return _misc.RanGen_instance()
RanGen_instance = _misc.RanGen_instance



