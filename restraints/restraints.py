# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_restraints', [dirname(__file__)])
        except ImportError:
            import _restraints
            return _restraints
        if fp is not None:
            try:
                _mod = imp.load_module('_restraints', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _restraints = swig_import_helper()
    del swig_import_helper
else:
    import _restraints
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _restraints.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _restraints.SwigPyIterator_value(self)
    def incr(self, n = 1): return _restraints.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _restraints.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _restraints.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _restraints.SwigPyIterator_equal(self, *args)
    def copy(self): return _restraints.SwigPyIterator_copy(self)
    def next(self): return _restraints.SwigPyIterator_next(self)
    def __next__(self): return _restraints.SwigPyIterator___next__(self)
    def previous(self): return _restraints.SwigPyIterator_previous(self)
    def advance(self, *args): return _restraints.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _restraints.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _restraints.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _restraints.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _restraints.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _restraints.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _restraints.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _restraints.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Restraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Restraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Restraint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _restraints.new_Restraint(*args)
        try: self.this.append(this)
        except: self.this = this
    def satisfied(self, *args): return _restraints.Restraint_satisfied(self, *args)
    __swig_destroy__ = _restraints.delete_Restraint
    __del__ = lambda self : None;
    def getInds(self): return _restraints.Restraint_getInds(self)
    def describe(self): return _restraints.Restraint_describe(self)
    def name(self): return _restraints.Restraint_name(self)
Restraint_swigregister = _restraints.Restraint_swigregister
Restraint_swigregister(Restraint)

class DistanceRestraint(Restraint):
    __swig_setmethods__ = {}
    for _s in [Restraint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistanceRestraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Restraint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistanceRestraint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _restraints.new_DistanceRestraint(*args)
        try: self.this.append(this)
        except: self.this = this
    def satisfied(self, *args): return _restraints.DistanceRestraint_satisfied(self, *args)
    def describe(self): return _restraints.DistanceRestraint_describe(self)
    __swig_destroy__ = _restraints.delete_DistanceRestraint
    __del__ = lambda self : None;
DistanceRestraint_swigregister = _restraints.DistanceRestraint_swigregister
DistanceRestraint_swigregister(DistanceRestraint)

class AngleRestraint(Restraint):
    __swig_setmethods__ = {}
    for _s in [Restraint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AngleRestraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Restraint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AngleRestraint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _restraints.new_AngleRestraint(*args)
        try: self.this.append(this)
        except: self.this = this
    def satisfied(self, *args): return _restraints.AngleRestraint_satisfied(self, *args)
    def describe(self): return _restraints.AngleRestraint_describe(self)
    __swig_destroy__ = _restraints.delete_AngleRestraint
    __del__ = lambda self : None;
AngleRestraint_swigregister = _restraints.AngleRestraint_swigregister
AngleRestraint_swigregister(AngleRestraint)

class DihedRestraint(Restraint):
    __swig_setmethods__ = {}
    for _s in [Restraint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DihedRestraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Restraint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DihedRestraint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _restraints.new_DihedRestraint(*args)
        try: self.this.append(this)
        except: self.this = this
    def satisfied(self, *args): return _restraints.DihedRestraint_satisfied(self, *args)
    def describe(self): return _restraints.DihedRestraint_describe(self)
    __swig_destroy__ = _restraints.delete_DihedRestraint
    __del__ = lambda self : None;
DihedRestraint_swigregister = _restraints.DihedRestraint_swigregister
DihedRestraint_swigregister(DihedRestraint)

class SphPosRestr(Restraint):
    __swig_setmethods__ = {}
    for _s in [Restraint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SphPosRestr, name, value)
    __swig_getmethods__ = {}
    for _s in [Restraint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SphPosRestr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _restraints.new_SphPosRestr(*args)
        try: self.this.append(this)
        except: self.this = this
    def satisfied(self, *args): return _restraints.SphPosRestr_satisfied(self, *args)
    def describe(self): return _restraints.SphPosRestr_describe(self)
    __swig_destroy__ = _restraints.delete_SphPosRestr
    __del__ = lambda self : None;
SphPosRestr_swigregister = _restraints.SphPosRestr_swigregister
SphPosRestr_swigregister(SphPosRestr)

class CentroidPosRestraint(Restraint):
    __swig_setmethods__ = {}
    for _s in [Restraint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CentroidPosRestraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Restraint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CentroidPosRestraint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _restraints.new_CentroidPosRestraint(*args)
        try: self.this.append(this)
        except: self.this = this
    def satisfied(self, *args): return _restraints.CentroidPosRestraint_satisfied(self, *args)
    def describe(self): return _restraints.CentroidPosRestraint_describe(self)
    __swig_destroy__ = _restraints.delete_CentroidPosRestraint
    __del__ = lambda self : None;
CentroidPosRestraint_swigregister = _restraints.CentroidPosRestraint_swigregister
CentroidPosRestraint_swigregister(CentroidPosRestraint)

class RATrestraint(Restraint):
    __swig_setmethods__ = {}
    for _s in [Restraint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RATrestraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Restraint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RATrestraint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _restraints.new_RATrestraint(*args)
        try: self.this.append(this)
        except: self.this = this
    def satisfied(self, *args): return _restraints.RATrestraint_satisfied(self, *args)
    __swig_destroy__ = _restraints.delete_RATrestraint
    __del__ = lambda self : None;
RATrestraint_swigregister = _restraints.RATrestraint_swigregister
RATrestraint_swigregister(RATrestraint)

class EDrestraint(Restraint):
    __swig_setmethods__ = {}
    for _s in [Restraint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EDrestraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Restraint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EDrestraint, name)
    __repr__ = _swig_repr
    __swig_getmethods__["makeEDrestraintFromMTZ"] = lambda x: _restraints.EDrestraint_makeEDrestraintFromMTZ
    if _newclass:makeEDrestraintFromMTZ = staticmethod(_restraints.EDrestraint_makeEDrestraintFromMTZ)
    __swig_getmethods__["makeEDrestraintFromMap"] = lambda x: _restraints.EDrestraint_makeEDrestraintFromMap
    if _newclass:makeEDrestraintFromMap = staticmethod(_restraints.EDrestraint_makeEDrestraintFromMap)
    __swig_getmethods__["findBadfit"] = lambda x: _restraints.EDrestraint_findBadfit
    if _newclass:findBadfit = staticmethod(_restraints.EDrestraint_findBadfit)
    __swig_getmethods__["findBadfit1"] = lambda x: _restraints.EDrestraint_findBadfit1
    if _newclass:findBadfit1 = staticmethod(_restraints.EDrestraint_findBadfit1)
    def satisfied(self, *args): return _restraints.EDrestraint_satisfied(self, *args)
    def scoreSigma(self, *args): return _restraints.EDrestraint_scoreSigma(self, *args)
    def scoreAround(self, *args): return _restraints.EDrestraint_scoreAround(self, *args)
    def evalDensity(self, *args): return _restraints.EDrestraint_evalDensity(self, *args)
    def score(self, *args): return _restraints.EDrestraint_score(self, *args)
    def describe(self): return _restraints.EDrestraint_describe(self)
    def __init__(self, *args): 
        this = _restraints.new_EDrestraint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["getPenalty"] = lambda x: _restraints.EDrestraint_getPenalty
    if _newclass:getPenalty = staticmethod(_restraints.EDrestraint_getPenalty)
    __swig_getmethods__["setPenalty"] = lambda x: _restraints.EDrestraint_setPenalty
    if _newclass:setPenalty = staticmethod(_restraints.EDrestraint_setPenalty)
    __swig_setmethods__["negpen"] = _restraints.EDrestraint_negpen_set
    __swig_getmethods__["negpen"] = _restraints.EDrestraint_negpen_get
    if _newclass:negpen = _swig_property(_restraints.EDrestraint_negpen_get, _restraints.EDrestraint_negpen_set)
    __swig_setmethods__["scatterRad"] = _restraints.EDrestraint_scatterRad_set
    __swig_getmethods__["scatterRad"] = _restraints.EDrestraint_scatterRad_get
    if _newclass:scatterRad = _swig_property(_restraints.EDrestraint_scatterRad_get, _restraints.EDrestraint_scatterRad_set)
    __swig_getmethods__["getScatRad"] = lambda x: _restraints.EDrestraint_getScatRad
    if _newclass:getScatRad = staticmethod(_restraints.EDrestraint_getScatRad)
    __swig_getmethods__["setScatRad"] = lambda x: _restraints.EDrestraint_setScatRad
    if _newclass:setScatRad = staticmethod(_restraints.EDrestraint_setScatRad)
    __swig_destroy__ = _restraints.delete_EDrestraint
    __del__ = lambda self : None;
EDrestraint_swigregister = _restraints.EDrestraint_swigregister
EDrestraint_swigregister(EDrestraint)

def EDrestraint_makeEDrestraintFromMTZ(*args):
  return _restraints.EDrestraint_makeEDrestraintFromMTZ(*args)
EDrestraint_makeEDrestraintFromMTZ = _restraints.EDrestraint_makeEDrestraintFromMTZ

def EDrestraint_makeEDrestraintFromMap(*args):
  return _restraints.EDrestraint_makeEDrestraintFromMap(*args)
EDrestraint_makeEDrestraintFromMap = _restraints.EDrestraint_makeEDrestraintFromMap

def EDrestraint_findBadfit(*args):
  return _restraints.EDrestraint_findBadfit(*args)
EDrestraint_findBadfit = _restraints.EDrestraint_findBadfit

def EDrestraint_findBadfit1(*args):
  return _restraints.EDrestraint_findBadfit1(*args)
EDrestraint_findBadfit1 = _restraints.EDrestraint_findBadfit1

def EDrestraint_getPenalty():
  return _restraints.EDrestraint_getPenalty()
EDrestraint_getPenalty = _restraints.EDrestraint_getPenalty

def EDrestraint_setPenalty(*args):
  return _restraints.EDrestraint_setPenalty(*args)
EDrestraint_setPenalty = _restraints.EDrestraint_setPenalty
cvar = _restraints.cvar

def EDrestraint_getScatRad():
  return _restraints.EDrestraint_getScatRad()
EDrestraint_getScatRad = _restraints.EDrestraint_getScatRad

def EDrestraint_setScatRad(*args):
  return _restraints.EDrestraint_setScatRad(*args)
EDrestraint_setScatRad = _restraints.EDrestraint_setScatRad

class SingleMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SingleMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SingleMap, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _restraints.SingleMap_instance
    if _newclass:instance = staticmethod(_restraints.SingleMap_instance)
    def map(self, *args): return _restraints.SingleMap_map(self, *args)
    def addMap(self, *args): return _restraints.SingleMap_addMap(self, *args)
    __swig_destroy__ = _restraints.delete_SingleMap
    __del__ = lambda self : None;
SingleMap_swigregister = _restraints.SingleMap_swigregister
SingleMap_swigregister(SingleMap)

def SingleMap_instance():
  return _restraints.SingleMap_instance()
SingleMap_instance = _restraints.SingleMap_instance

class EnvelopeRestraint(Restraint):
    __swig_setmethods__ = {}
    for _s in [Restraint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnvelopeRestraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Restraint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnvelopeRestraint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _restraints.new_EnvelopeRestraint(*args)
        try: self.this.append(this)
        except: self.this = this
    def satisfied(self, *args): return _restraints.EnvelopeRestraint_satisfied(self, *args)
    def describe(self): return _restraints.EnvelopeRestraint_describe(self)
    __swig_destroy__ = _restraints.delete_EnvelopeRestraint
    __del__ = lambda self : None;
EnvelopeRestraint_swigregister = _restraints.EnvelopeRestraint_swigregister
EnvelopeRestraint_swigregister(EnvelopeRestraint)



