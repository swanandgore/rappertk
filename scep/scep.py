# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_scep', [dirname(__file__)])
        except ImportError:
            import _scep
            return _scep
        if fp is not None:
            try:
                _mod = imp.load_module('_scep', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _scep = swig_import_helper()
    del swig_import_helper
else:
    import _scep
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _scep.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _scep.SwigPyIterator_value(self)
    def incr(self, n = 1): return _scep.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _scep.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _scep.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _scep.SwigPyIterator_equal(self, *args)
    def copy(self): return _scep.SwigPyIterator_copy(self)
    def next(self): return _scep.SwigPyIterator_next(self)
    def __next__(self): return _scep.SwigPyIterator___next__(self)
    def previous(self): return _scep.SwigPyIterator_previous(self)
    def advance(self, *args): return _scep.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _scep.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _scep.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _scep.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _scep.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _scep.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _scep.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _scep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VecInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _scep.VecInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _scep.VecInt___nonzero__(self)
    def __bool__(self): return _scep.VecInt___bool__(self)
    def __len__(self): return _scep.VecInt___len__(self)
    def pop(self): return _scep.VecInt_pop(self)
    def __getslice__(self, *args): return _scep.VecInt___getslice__(self, *args)
    def __setslice__(self, *args): return _scep.VecInt___setslice__(self, *args)
    def __delslice__(self, *args): return _scep.VecInt___delslice__(self, *args)
    def __delitem__(self, *args): return _scep.VecInt___delitem__(self, *args)
    def __getitem__(self, *args): return _scep.VecInt___getitem__(self, *args)
    def __setitem__(self, *args): return _scep.VecInt___setitem__(self, *args)
    def append(self, *args): return _scep.VecInt_append(self, *args)
    def empty(self): return _scep.VecInt_empty(self)
    def size(self): return _scep.VecInt_size(self)
    def clear(self): return _scep.VecInt_clear(self)
    def swap(self, *args): return _scep.VecInt_swap(self, *args)
    def get_allocator(self): return _scep.VecInt_get_allocator(self)
    def begin(self): return _scep.VecInt_begin(self)
    def end(self): return _scep.VecInt_end(self)
    def rbegin(self): return _scep.VecInt_rbegin(self)
    def rend(self): return _scep.VecInt_rend(self)
    def pop_back(self): return _scep.VecInt_pop_back(self)
    def erase(self, *args): return _scep.VecInt_erase(self, *args)
    def __init__(self, *args): 
        this = _scep.new_VecInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _scep.VecInt_push_back(self, *args)
    def front(self): return _scep.VecInt_front(self)
    def back(self): return _scep.VecInt_back(self)
    def assign(self, *args): return _scep.VecInt_assign(self, *args)
    def resize(self, *args): return _scep.VecInt_resize(self, *args)
    def insert(self, *args): return _scep.VecInt_insert(self, *args)
    def reserve(self, *args): return _scep.VecInt_reserve(self, *args)
    def capacity(self): return _scep.VecInt_capacity(self)
    __swig_destroy__ = _scep.delete_VecInt
    __del__ = lambda self : None;
VecInt_swigregister = _scep.VecInt_swigregister
VecInt_swigregister(VecInt)

class VecVecInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecVecInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVecInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _scep.VecVecInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _scep.VecVecInt___nonzero__(self)
    def __bool__(self): return _scep.VecVecInt___bool__(self)
    def __len__(self): return _scep.VecVecInt___len__(self)
    def pop(self): return _scep.VecVecInt_pop(self)
    def __getslice__(self, *args): return _scep.VecVecInt___getslice__(self, *args)
    def __setslice__(self, *args): return _scep.VecVecInt___setslice__(self, *args)
    def __delslice__(self, *args): return _scep.VecVecInt___delslice__(self, *args)
    def __delitem__(self, *args): return _scep.VecVecInt___delitem__(self, *args)
    def __getitem__(self, *args): return _scep.VecVecInt___getitem__(self, *args)
    def __setitem__(self, *args): return _scep.VecVecInt___setitem__(self, *args)
    def append(self, *args): return _scep.VecVecInt_append(self, *args)
    def empty(self): return _scep.VecVecInt_empty(self)
    def size(self): return _scep.VecVecInt_size(self)
    def clear(self): return _scep.VecVecInt_clear(self)
    def swap(self, *args): return _scep.VecVecInt_swap(self, *args)
    def get_allocator(self): return _scep.VecVecInt_get_allocator(self)
    def begin(self): return _scep.VecVecInt_begin(self)
    def end(self): return _scep.VecVecInt_end(self)
    def rbegin(self): return _scep.VecVecInt_rbegin(self)
    def rend(self): return _scep.VecVecInt_rend(self)
    def pop_back(self): return _scep.VecVecInt_pop_back(self)
    def erase(self, *args): return _scep.VecVecInt_erase(self, *args)
    def __init__(self, *args): 
        this = _scep.new_VecVecInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _scep.VecVecInt_push_back(self, *args)
    def front(self): return _scep.VecVecInt_front(self)
    def back(self): return _scep.VecVecInt_back(self)
    def assign(self, *args): return _scep.VecVecInt_assign(self, *args)
    def resize(self, *args): return _scep.VecVecInt_resize(self, *args)
    def insert(self, *args): return _scep.VecVecInt_insert(self, *args)
    def reserve(self, *args): return _scep.VecVecInt_reserve(self, *args)
    def capacity(self): return _scep.VecVecInt_capacity(self)
    __swig_destroy__ = _scep.delete_VecVecInt
    __del__ = lambda self : None;
VecVecInt_swigregister = _scep.VecVecInt_swigregister
VecVecInt_swigregister(VecVecInt)

class VecFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecFloat, name)
    __repr__ = _swig_repr
    def iterator(self): return _scep.VecFloat_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _scep.VecFloat___nonzero__(self)
    def __bool__(self): return _scep.VecFloat___bool__(self)
    def __len__(self): return _scep.VecFloat___len__(self)
    def pop(self): return _scep.VecFloat_pop(self)
    def __getslice__(self, *args): return _scep.VecFloat___getslice__(self, *args)
    def __setslice__(self, *args): return _scep.VecFloat___setslice__(self, *args)
    def __delslice__(self, *args): return _scep.VecFloat___delslice__(self, *args)
    def __delitem__(self, *args): return _scep.VecFloat___delitem__(self, *args)
    def __getitem__(self, *args): return _scep.VecFloat___getitem__(self, *args)
    def __setitem__(self, *args): return _scep.VecFloat___setitem__(self, *args)
    def append(self, *args): return _scep.VecFloat_append(self, *args)
    def empty(self): return _scep.VecFloat_empty(self)
    def size(self): return _scep.VecFloat_size(self)
    def clear(self): return _scep.VecFloat_clear(self)
    def swap(self, *args): return _scep.VecFloat_swap(self, *args)
    def get_allocator(self): return _scep.VecFloat_get_allocator(self)
    def begin(self): return _scep.VecFloat_begin(self)
    def end(self): return _scep.VecFloat_end(self)
    def rbegin(self): return _scep.VecFloat_rbegin(self)
    def rend(self): return _scep.VecFloat_rend(self)
    def pop_back(self): return _scep.VecFloat_pop_back(self)
    def erase(self, *args): return _scep.VecFloat_erase(self, *args)
    def __init__(self, *args): 
        this = _scep.new_VecFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _scep.VecFloat_push_back(self, *args)
    def front(self): return _scep.VecFloat_front(self)
    def back(self): return _scep.VecFloat_back(self)
    def assign(self, *args): return _scep.VecFloat_assign(self, *args)
    def resize(self, *args): return _scep.VecFloat_resize(self, *args)
    def insert(self, *args): return _scep.VecFloat_insert(self, *args)
    def reserve(self, *args): return _scep.VecFloat_reserve(self, *args)
    def capacity(self): return _scep.VecFloat_capacity(self)
    __swig_destroy__ = _scep.delete_VecFloat
    __del__ = lambda self : None;
VecFloat_swigregister = _scep.VecFloat_swigregister
VecFloat_swigregister(VecFloat)

class VecVecFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecVecFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVecFloat, name)
    __repr__ = _swig_repr
    def iterator(self): return _scep.VecVecFloat_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _scep.VecVecFloat___nonzero__(self)
    def __bool__(self): return _scep.VecVecFloat___bool__(self)
    def __len__(self): return _scep.VecVecFloat___len__(self)
    def pop(self): return _scep.VecVecFloat_pop(self)
    def __getslice__(self, *args): return _scep.VecVecFloat___getslice__(self, *args)
    def __setslice__(self, *args): return _scep.VecVecFloat___setslice__(self, *args)
    def __delslice__(self, *args): return _scep.VecVecFloat___delslice__(self, *args)
    def __delitem__(self, *args): return _scep.VecVecFloat___delitem__(self, *args)
    def __getitem__(self, *args): return _scep.VecVecFloat___getitem__(self, *args)
    def __setitem__(self, *args): return _scep.VecVecFloat___setitem__(self, *args)
    def append(self, *args): return _scep.VecVecFloat_append(self, *args)
    def empty(self): return _scep.VecVecFloat_empty(self)
    def size(self): return _scep.VecVecFloat_size(self)
    def clear(self): return _scep.VecVecFloat_clear(self)
    def swap(self, *args): return _scep.VecVecFloat_swap(self, *args)
    def get_allocator(self): return _scep.VecVecFloat_get_allocator(self)
    def begin(self): return _scep.VecVecFloat_begin(self)
    def end(self): return _scep.VecVecFloat_end(self)
    def rbegin(self): return _scep.VecVecFloat_rbegin(self)
    def rend(self): return _scep.VecVecFloat_rend(self)
    def pop_back(self): return _scep.VecVecFloat_pop_back(self)
    def erase(self, *args): return _scep.VecVecFloat_erase(self, *args)
    def __init__(self, *args): 
        this = _scep.new_VecVecFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _scep.VecVecFloat_push_back(self, *args)
    def front(self): return _scep.VecVecFloat_front(self)
    def back(self): return _scep.VecVecFloat_back(self)
    def assign(self, *args): return _scep.VecVecFloat_assign(self, *args)
    def resize(self, *args): return _scep.VecVecFloat_resize(self, *args)
    def insert(self, *args): return _scep.VecVecFloat_insert(self, *args)
    def reserve(self, *args): return _scep.VecVecFloat_reserve(self, *args)
    def capacity(self): return _scep.VecVecFloat_capacity(self)
    __swig_destroy__ = _scep.delete_VecVecFloat
    __del__ = lambda self : None;
VecVecFloat_swigregister = _scep.VecVecFloat_swigregister
VecVecFloat_swigregister(VecVecFloat)

class VecBuilder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecBuilder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecBuilder, name)
    __repr__ = _swig_repr
    def iterator(self): return _scep.VecBuilder_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _scep.VecBuilder___nonzero__(self)
    def __bool__(self): return _scep.VecBuilder___bool__(self)
    def __len__(self): return _scep.VecBuilder___len__(self)
    def pop(self): return _scep.VecBuilder_pop(self)
    def __getslice__(self, *args): return _scep.VecBuilder___getslice__(self, *args)
    def __setslice__(self, *args): return _scep.VecBuilder___setslice__(self, *args)
    def __delslice__(self, *args): return _scep.VecBuilder___delslice__(self, *args)
    def __delitem__(self, *args): return _scep.VecBuilder___delitem__(self, *args)
    def __getitem__(self, *args): return _scep.VecBuilder___getitem__(self, *args)
    def __setitem__(self, *args): return _scep.VecBuilder___setitem__(self, *args)
    def append(self, *args): return _scep.VecBuilder_append(self, *args)
    def empty(self): return _scep.VecBuilder_empty(self)
    def size(self): return _scep.VecBuilder_size(self)
    def clear(self): return _scep.VecBuilder_clear(self)
    def swap(self, *args): return _scep.VecBuilder_swap(self, *args)
    def get_allocator(self): return _scep.VecBuilder_get_allocator(self)
    def begin(self): return _scep.VecBuilder_begin(self)
    def end(self): return _scep.VecBuilder_end(self)
    def rbegin(self): return _scep.VecBuilder_rbegin(self)
    def rend(self): return _scep.VecBuilder_rend(self)
    def pop_back(self): return _scep.VecBuilder_pop_back(self)
    def erase(self, *args): return _scep.VecBuilder_erase(self, *args)
    def __init__(self, *args): 
        this = _scep.new_VecBuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _scep.VecBuilder_push_back(self, *args)
    def front(self): return _scep.VecBuilder_front(self)
    def back(self): return _scep.VecBuilder_back(self)
    def assign(self, *args): return _scep.VecBuilder_assign(self, *args)
    def resize(self, *args): return _scep.VecBuilder_resize(self, *args)
    def insert(self, *args): return _scep.VecBuilder_insert(self, *args)
    def reserve(self, *args): return _scep.VecBuilder_reserve(self, *args)
    def capacity(self): return _scep.VecBuilder_capacity(self)
    __swig_destroy__ = _scep.delete_VecBuilder
    __del__ = lambda self : None;
VecBuilder_swigregister = _scep.VecBuilder_swigregister
VecBuilder_swigregister(VecBuilder)

class SCenergyProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCenergyProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCenergyProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _scep.new_SCenergyProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    def addMTZinfo(self, *args): return _scep.SCenergyProvider_addMTZinfo(self, *args)
    def addMAPinfo(self, *args): return _scep.SCenergyProvider_addMAPinfo(self, *args)
    def scoreGivenRotamers(self): return _scep.SCenergyProvider_scoreGivenRotamers(self)
    def pairEn(self, *args): return _scep.SCenergyProvider_pairEn(self, *args)
    def interact(self, *args): return _scep.SCenergyProvider_interact(self, *args)
    def selfEn(self, *args): return _scep.SCenergyProvider_selfEn(self, *args)
    def numRot(self, *args): return _scep.SCenergyProvider_numRot(self, *args)
    def collapse(self, *args): return _scep.SCenergyProvider_collapse(self, *args)
    def join(self, *args): return _scep.SCenergyProvider_join(self, *args)
    def buildAssig(self, *args): return _scep.SCenergyProvider_buildAssig(self, *args)
    def energyRandAssig(self): return _scep.SCenergyProvider_energyRandAssig(self)
    def resetEnergy(self): return _scep.SCenergyProvider_resetEnergy(self)
    def findEsofar(self, *args): return _scep.SCenergyProvider_findEsofar(self, *args)
    def deeGoldstein(self, *args): return _scep.SCenergyProvider_deeGoldstein(self, *args)
    def exhaustiveEnergy(self): return _scep.SCenergyProvider_exhaustiveEnergy(self)
    def exEn(self, *args): return _scep.SCenergyProvider_exEn(self, *args)
    __swig_destroy__ = _scep.delete_SCenergyProvider
    __del__ = lambda self : None;
SCenergyProvider_swigregister = _scep.SCenergyProvider_swigregister
SCenergyProvider_swigregister(SCenergyProvider)


def findBC(*args):
  return _scep.findBC(*args)
findBC = _scep.findBC


